{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a64341a7-aa7f-4b3e-8a7f-c63ec84c51e8",
   "metadata": {},
   "source": [
    "# Базовые запросы SQL"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "823c4c68-2280-4f4a-a6e9-34361c3274dd",
   "metadata": {},
   "source": [
    "**Задание №1**\n",
    "\n",
    "Выведите все записи из таблицы **products**.\n",
    "Поля в результирующей таблице: **product_id**, **name**, **price**\n",
    "```sql\n",
    "SELECT *\n",
    "FROM products\n",
    "```\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2895e568-521e-45bc-a00e-caf66d11ef3e",
   "metadata": {},
   "source": [
    "**Задание №2**\n",
    "\n",
    "Выведите все записи из таблицы products, отсортировав их по наименованиям товаров в алфавитном порядке, т.е. по возрастанию. Для сортировки используйте оператор **ORDER BY**.\n",
    "Поля в результирующей таблице: **product_id**, **name**, **price**\n",
    "```sql\n",
    "SELECT product_id,\n",
    "       name,\n",
    "       price\n",
    "FROM   products\n",
    "ORDER BY name \n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "988b9b4b-156c-4105-97f6-d489fab445c2",
   "metadata": {},
   "source": [
    "**Задание №3**\n",
    "\n",
    "Отсортируйте таблицу **courier_actions** сначала по колонке **courier_id** по возрастанию id курьера, потом по колонке **action** (снова по возрастанию), а затем по колонке **time**, но уже по убыванию — от самого последнего действия к самому первому. Не забудьте включить в результат колонку **order_id**.\n",
    "\n",
    "Добавьте в запрос оператор **LIMIT** и выведите только первые 1000 строк результирующей таблицы.\n",
    "\n",
    "Поля в результирующей таблице: **courier_id**, **order_id**, **action**, **time**\n",
    "```sql\n",
    "SELECT courier_id,\n",
    "       order_id,\n",
    "       action,\n",
    "       time\n",
    "FROM   courier_actions\n",
    "ORDER BY courier_id, action, time DESC \n",
    "LIMIT 1000\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a9ee81f8-b377-466d-bcdd-0accd98ef7c0",
   "metadata": {},
   "source": [
    "**Задание №4**\n",
    "\n",
    "Используя операторы **SELECT**, **FROM**, **ORDER BY** и **LIMIT**, определите 5 самых дорогих товаров в таблице **products**, которые доставляет наш сервис. Выведите их наименования и цену.\n",
    "\n",
    "Поля в результирующей таблице: **name**, **price**\n",
    "```sql\n",
    "SELECT name,\n",
    "       price\n",
    "FROM   products\n",
    "ORDER BY price DESC \n",
    "LIMIT 5\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c35a510-184d-4bfd-bb3c-d3546b3784c0",
   "metadata": {},
   "source": [
    "**Задание №5**\n",
    "\n",
    "Повторите запрос из предыдущего задания, но теперь колонки name и **price** переименуйте соответственно в **product_name** и **product_price**.\n",
    "\n",
    "Поля в результирующей таблице: **product_name**, **product_price**\n",
    "```sql\n",
    "SELECT name AS product_name,\n",
    "       price AS product_price\n",
    "FROM   products\n",
    "ORDER BY product_price DESC \n",
    "LIMIT 5\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9854ada8-c6a3-492f-a1f5-042f355aca24",
   "metadata": {},
   "source": [
    "**Задание №6**\n",
    "\n",
    "Используя операторы **SELECT**, **FROM**, **ORDER BY** и **LIMIT**, а также функцию **LENGTH**, определите товар с самым длинным названием в таблице **products**. Выведите его наименование, длину наименования в символах, а также цену этого товара. Колонку с длиной наименования в символах назовите **name_length**.\n",
    "\n",
    "Поля в результирующей таблице: name, name_length, price\n",
    "```sql\n",
    "SELECT name,\n",
    "       price,\n",
    "       length (name) AS name_length\n",
    "FROM   products\n",
    "ORDER BY name_length DESC \n",
    "LIMIT 1\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "124371a5-f73c-4c8e-966e-966b150a40c0",
   "metadata": {},
   "source": [
    "**Задание №7**\n",
    "\n",
    "Примените последовательно функции **UPPER** и **SPLIT_PART** к колонке name и преобразуйте наименования товаров в таблице **products** так, чтобы от названий осталось только первое слово, записанное в верхнем регистре. Колонку с новым названием, состоящим из первого слова, назовите **first_word**.\n",
    "\n",
    "В результат включите исходные наименования товаров, новые наименования из первого слова, а также цену товаров. Результат отсортируйте по возрастанию исходного наименования товара в колонке **name**.\n",
    "\n",
    "Поля в результирующей таблице: **name**, **first_word**, **price**\n",
    "```sql\n",
    "SELECT name,\n",
    "       price,\n",
    "       upper (split_part (name, ' ', 1)) as first_word\n",
    "FROM   products\n",
    "ORDER BY name\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f7fd356-213b-4757-b303-2daf7fd818ef",
   "metadata": {},
   "source": [
    "**Задание №8**\n",
    "\n",
    "Измените тип колонки **price** из таблицы **products** на **VARCHAR**. Выведите колонки с наименованием товаров, ценой в исходном формате и ценой в формате **VARCHAR**. Новую колонку с ценой в новом формате назовите **price_char**.\n",
    "\n",
    "Результат отсортируйте по возрастанию исходного наименования товара в колонке name. Количество выводимых записей не ограничивайте.\n",
    "\n",
    "Поле в результирующей таблице: **name**, **price**, **price_char**\n",
    "```sql\n",
    "SELECT name,\n",
    "       price,\n",
    "       cast(price AS varchar) AS price_char\n",
    "FROM   products\n",
    "ORDER BY name\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d4434731-062d-4f4c-9dcc-8e3cfe3d0ed4",
   "metadata": {},
   "source": [
    "**Задание №9**\n",
    "\n",
    "Для первых 200 записей из таблицы **orders** выведите информацию в следующем виде (обратите внимание на пробелы):\n",
    "\n",
    "Заказ № [id заказа] создан [дата]\n",
    "\n",
    "Полученную колонку назовите **order_info**.\n",
    "```sql\n",
    "SELECT concat ('Заказ №', ' ', order_id, ' ', 'создан', ' ', creation_time::date) AS order_info\n",
    "FROM   orders \n",
    "LIMIT 200\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b394db37-98eb-4abc-9d12-654d06fd2419",
   "metadata": {},
   "source": [
    "**Задание №10**\n",
    "\n",
    "Выведите id всех курьеров и их годы рождения из таблицы **couriers**.\n",
    "\n",
    "Год рождения необходимо получить из колонки **birth_date**. Новую колонку с годом назовите **birth_year**. Результат отсортируйте сначала по убыванию года рождения курьера (т.е. от самых младших к самым старшим), затем по возрастанию id курьера.\n",
    "\n",
    "Поля в результирующей таблице: **courier_id**, **birth_year**\n",
    "```sql\n",
    "SELECT courier_id,\n",
    "       date_part('year', birth_date) AS birth_year\n",
    "FROM   couriers\n",
    "ORDER BY birth_year DESC, courier_id\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ace7b9f4-ff6d-48ec-bd96-cca7cbe6f8c6",
   "metadata": {},
   "source": [
    "**Задание №11**\n",
    "\n",
    "Как и в предыдущем задании, снова выведите id всех курьеров и их годы рождения, только теперь к извлеченному году примените функцию **COALESCE**. Укажите параметры функции так, чтобы вместо **NULL** значений в результат попадало текстовое значение **unknown**. Названия полей оставьте прежними.\n",
    "\n",
    "Отсортируйте итоговую таблицу сначала по убыванию года рождения курьера, затем по возрастанию id курьера.\n",
    "\n",
    "Поля в результирующей таблице: **courier_id**, **birth_year**\n",
    "\n",
    "\n",
    "```sql\n",
    "SELECT courier_id,\n",
    "       COALESCE(CAST(date_part('year', birth_date) as varchar),'unknown') AS birth_year\n",
    "FROM   couriers\n",
    "ORDER BY birth_year DESC, courier_id\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a3d750e0-681e-498b-9632-70170f771152",
   "metadata": {},
   "source": [
    "**Задание №12**\n",
    "\n",
    "Давайте представим, что по какой-то необъяснимой причине мы вдруг решили в одночасье повысить цену всех товаров в таблице products на **5%**.\n",
    "\n",
    "Выведите id и наименования всех товаров, их старую и новую цену. Колонку со старой ценой назовите **old_price**, а колонку с новой — ***new_price**.\n",
    "\n",
    "Результат отсортируйте сначала по убыванию новой цены, затем по возрастанию id товара.\n",
    "\n",
    "Поля в результирующей таблице: **product_id**, **name**, **old_price**, **new_price**\n",
    "```sql\n",
    "SELECT product_id,\n",
    "       name,\n",
    "       price AS old_price,\n",
    "       price + (price/100)* 5 AS new_price\n",
    "FROM   products\n",
    "ORDER BY new_price DESC, product_id\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab69f83c-d899-45d2-9800-4ff4f409c9c1",
   "metadata": {},
   "source": [
    "**Задание №13**\n",
    "\n",
    "Вновь, как и в прошлом задании, повысьте цену всех товаров на **5%**, только теперь к колонке с новой ценой примените функцию **ROUND**. Выведите id и наименования товаров, их старую цену, а также новую цену с округлением. Новую цену округлите до одного знака после запятой, но тип данных не меняйте.\n",
    "\n",
    "Результат отсортируйте сначала по убыванию новой цены, затем по возрастанию id товара.\n",
    "\n",
    "Поля в результирующей таблице: **product_id**, **name**, **old_price**, **new_price**\n",
    "```sql\n",
    "SELECT product_id,\n",
    "       name,\n",
    "       price AS old_price,\n",
    "       round(price + (price/100)*5, 1) AS new_price\n",
    "FROM   products\n",
    "ORDER BY new_price DESC, product_id\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ba62976-5eca-425b-8fdf-95bdd4715877",
   "metadata": {},
   "source": [
    "**Задание №14**\n",
    "\n",
    "Повысьте цену на **5%** только на те товары, цена которых превышает **100** рублей. Цену остальных товаров оставьте без изменений. Также не повышайте цену на икру, которая и так стоит **800** рублей. Выведите id и наименования всех товаров, их старую и новую цену. Цену округлять не нужно.\n",
    "\n",
    "Результат отсортируйте сначала по убыванию новой цены, затем по возрастанию id товара.\n",
    "\n",
    "Поля в результирующей таблице: **product_id**, **name**, **old_price**, **new_price**\n",
    "```sql\n",
    "SELECT product_id,\n",
    "       name,\n",
    "       price AS old_price,\n",
    "       CASE\n",
    "       WHEN price > 100 AND price < 800 THEN price * 1.05\n",
    "       ELSE price \n",
    "       END AS new_price\n",
    "FROM   products\n",
    "ORDER BY new_price DESC, product_id\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ef67fa82-52c0-4382-83ef-301615f48746",
   "metadata": {},
   "source": [
    "**Задание №15**\n",
    "\n",
    "Вычислите НДС каждого товара в таблице **products** и рассчитайте цену без учёта НДС. Выведите всю информацию о товарах, включая сумму налога и цену без его учёта. Колонки с суммой налога и ценой без НДС назовите соответственно **tax** и **price_before_tax**. Округлите значения в этих колонках до двух знаков после запятой.\n",
    "\n",
    "Результат отсортируйте сначала по убыванию цены товара без учёта НДС, затем по возрастанию id товара.\n",
    "\n",
    "Поля в результирующей таблице: **product_id**, **name**, **price**, **tax**, **price_before_tax**\n",
    "```sql\n",
    "SELECT product_id,\n",
    "       name,\n",
    "       price,\n",
    "       round((price/1.2)*0.2, 2) AS tax,\n",
    "       CASE\n",
    "       WHEN price > 0 THEN round(price - (price/1.2)*0.2, 2)\n",
    "       ELSE price END AS price_before_tax\n",
    "FROM   products\n",
    "ORDER BY price_before_tax DESC, product_id\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "664458aa-812c-45f8-8037-947e318decd6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
